
// App.java
package org.example.assi_7;

import javafx.application.Application;
import javafx.beans.Observable;
import javafx.collections.ObservableList;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Objects;

public class App extends Application {
    @Override
    public void start(Stage stage) throws IOException {
      Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/org/example/assi_7/view/App.fxml")));
//      stage.initStyle(javafx.stage.StageStyle.UNDECORATED);

      root.setOnMousePressed(event -> {
          root.getScene().getWindow().setX(event.getScreenX() - root.getScene().getWindow().getX());
          root.getScene().getWindow().setY(event.getScreenY() - root.getScene().getWindow().getY());
      });

        root.setOnMouseDragged(event -> {
            root.getScene().getWindow().setX(event.getScreenX() - root.getScene().getWindow().getX());
            root.getScene().getWindow().setY(event.getScreenY() - root.getScene().getWindow().getY());
        });



      stage.setTitle("Student Management System");
      stage.setResizable(true);

      stage.setScene(new Scene(root, 800, 600));
      stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}

/****************** Controllers *******************/

package org.example.assi_7.controllers;


import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.helpers.Validator;
import org.example.assi_7.model.Student;

import java.util.Random;

public class AddStudentController {
    public AddStudentController(){

    }
    @FXML
    private Button addStudentButton;
    @FXML
    private Label studentNameLabel;

    @FXML
    private TextField studentNameTextField;

    @FXML
    private Label studentNameErrorLabel;



    public void addStudent(javafx.event.ActionEvent actionEvent) {

        if (!Validator.forString(studentNameTextField.getText()).hasLengthBetween(2,10).isValid()) {
            // make it red
            studentNameErrorLabel.setStyle("-fx-text-fill: red");
            studentNameTextField.setStyle("-fx-border-color: red");
            studentNameErrorLabel.setText("Student name must be between 2 and 10 characters");
            return;
        }

        String studentName = studentNameTextField.getText();

        // random student ID for now
        String randomStudentID = generateRandomID(9, "0123456789");

        Student student = new Student(studentName, randomStudentID);

        DataStorage.getInstance().addStudent(student);

        // close window
        closeWindow();
    }

    private String generateRandomID(int length, String characters) {
        Random random = new Random();
        StringBuilder randomID = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            randomID.append(characters.charAt(index));
        }

        return randomID.toString();
    }

    private void closeWindow() {
        // Get the current stage (window) and close it
        Stage stage = (Stage) studentNameTextField.getScene().getWindow();
        stage.close();
    }



}

//
package org.example.assi_7.controllers;

import com.almasb.fxgl.logging.Logger;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.layout.VBox;

import java.io.IOException;
import java.util.Objects;

public class AppController implements Initializable{


    @FXML
    private VBox contentPane;
    public void loadView(String fxmlPath) {
        try {
            // Load the specified FXML file
            Parent view = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(fxmlPath)));

            // Clear existing content and set the new view
            contentPane.getChildren().clear();
            contentPane.getChildren().add(view);

        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + fxmlPath, e);
        }
    }
    public void initialize(java.net.URL location, java.util.ResourceBundle resources) {
        loadView("/org/example/assi_7/view/Student.fxml");
    }

    public void studentView(javafx.event.ActionEvent actionEvent) throws IOException {
        loadView("/org/example/assi_7/view/Student.fxml");
    }

    public void courseView(javafx.event.ActionEvent actionEvent) throws IOException {
        loadView("/org/example/assi_7/view/Course.fxml");
    }

    public void gradeView(javafx.event.ActionEvent actionEvent) throws IOException {
        loadView("/org/example/assi_7/view/Grade.fxml");
    }
}



package org.example.assi_7.controllers;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.helpers.Validator;
import org.example.assi_7.model.Course;
import org.example.assi_7.model.Student;

public class AssignGradeController implements Initializable {

    @FXML
    private Label studentNameLabel;

    @FXML
    private ComboBox<String> dropDownCourses;

    @FXML
    private TextField grade;

    @FXML
    private Label errorLabel;

    public void initialize(java.net.URL location, java.util.ResourceBundle resources) {
    }

    public ObservableList<String> getCourses(String studentCode) {
        ObservableList<String> courses = FXCollections.observableArrayList();
        // get courses from DataStorage
    for (Course course : DataStorage.getInstance().getStudentByCode(studentCode).getEnrolledCourses()) {
            courses.add(course.getCourseName());
        }
        return courses;
    }

    public void setStudentName(String studentName) {
        studentNameLabel.setText(studentName);
    }

    private String studentCode;
    public void setStudentCode(String studentCode) {
        this.studentCode = studentCode;
        // clear
        dropDownCourses.getItems().clear();
        dropDownCourses.setItems(getCourses(studentCode));
    }

    public void assignGrade(javafx.event.ActionEvent actionEvent) {
        // enroll into course
        // find student by studentCode
        Student student = DataStorage.getInstance().getStudentByCode(studentCode);
        // update student course
        // find course by course name
        Course course = DataStorage.getInstance().getCourseByName(dropDownCourses.getValue());
        if (course == null) {
            // make it red
            errorLabel.setStyle("-fx-text-fill: red");
            dropDownCourses.setStyle("-fx-border-color: red");
            errorLabel.setText("Course not found");
            return;
        }

        // assign grade
        String gradeStr = this.grade.getText();
        if (!Validator.forString(gradeStr).isInteger().isValid()) {
            // make it red
            errorLabel.setStyle("-fx-text-fill: red");
            this.grade.setStyle("-fx-border-color: red");
            errorLabel.setText("Grade must be a number");
            return;
        }
        int grade = Integer.parseInt(gradeStr);


        if (!Validator.forInt(grade).isBetween(0, 100).isValid()) {
            // make it red
            errorLabel.setStyle("-fx-text-fill: red");
            this.grade.setStyle("-fx-border-color: red");
            errorLabel.setText("Grade must be between 0 and 100");
            return;
        }
        student.assignGrade(course, grade);

        // update student in DataStorage
        DataStorage.getInstance().updateStudent(student);


        // close window
        closeWindow();
    }

    private void closeWindow() {
        // Get the current stage (window) and close it
        Stage stage = (Stage) studentNameLabel.getScene().getWindow();
        stage.close();
    }
}



package org.example.assi_7.controllers;

import com.almasb.fxgl.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import org.example.assi_7.model.Course;

import java.io.IOException;
import java.util.Objects;

public class CourseController implements Initializable {

    @FXML
    private TableView<Course> courseTable;

    @FXML
    private TableColumn<Course, String> courseCodeColumn;

    @FXML
    private TableColumn<Course, String> courseNameColumn;

    @FXML
    private TableColumn<Course, Integer> maxCapacityColumn;

    @FXML
    private TableColumn<Course, Integer> totalEnrolledColumn;

    public void initialize(java.net.URL location, java.util.ResourceBundle resources) {
        // course table should be full width
        courseTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        courseCodeColumn.setCellValueFactory(new PropertyValueFactory<Course, String>("courseCode"));
        courseNameColumn.setCellValueFactory(new PropertyValueFactory<Course, String>("courseName"));
        maxCapacityColumn.setCellValueFactory(new PropertyValueFactory<Course, Integer>("maxCapacity"));
        totalEnrolledColumn.setCellValueFactory(new PropertyValueFactory<Course, Integer>("totalEnrolled"));

        courseTable.setItems(getCourses());

        courseTable.setEditable(true);
    }

    // dummy data
    public ObservableList<Course> getCourses() {
        ObservableList<Course> courses = FXCollections.observableArrayList();

        // get courses from DataStorage
        courses.addAll(Objects.requireNonNull(org.example.assi_7.helpers.DataStorage.getInstance()).getCourses());
            return courses;
    }

    public void enrollStudent(javafx.event.ActionEvent actionEvent) {
        String path = "/org/example/assi_7/view/components/EnrollStudent.fxml";
        // new window to add student
        try {
    FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
    Parent root = loader.load();

    // new stage
            Stage stage = new Stage();
            stage.setTitle("Enroll Student");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 400, 300));

            // set the owner of the new stage
            stage.initOwner(courseTable.getScene().getWindow());

            // show the new stage
            stage.show();


        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }
}




package org.example.assi_7.controllers;


import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.helpers.Validator;
import org.example.assi_7.model.Student;

import java.util.Random;

public class EditStudentController {
    public EditStudentController(){

    }
    @FXML
    private Button updateStudentButton;
    @FXML
    private Label studentNameLabel;

    @FXML
    private TextField studentNameTextField;

    private String studentCode;

    @FXML
    private Label studentNameErrorLabel;


    public void setStudentName(String studentName) {
        studentNameTextField.setText(studentName);
    }

    public void setStudentCode(String studentCode) {
        this.studentCode = studentCode;
    }



    public void updateStudent(javafx.event.ActionEvent actionEvent) {

        if (!Validator.forString(studentNameTextField.getText()).hasLengthBetween(2,10).isValid()) {
            // make it red
            studentNameErrorLabel.setStyle("-fx-text-fill: red");
            studentNameTextField.setStyle("-fx-border-color: red");
            studentNameErrorLabel.setText("Student name must be between 2 and 10 characters");
            return;
        }

        String studentName = studentNameTextField.getText();

        // find student by studentCode
        Student student = DataStorage.getInstance().getStudentByCode(studentCode);

        // update student name
        student.setName(studentName);

        // update student in DataStorage
        DataStorage.getInstance().updateStudent(student);

        // close window
        closeWindow();
    }

    private void closeWindow() {
        // Get the current stage (window) and close it
        Stage stage = (Stage) studentNameTextField.getScene().getWindow();
        stage.close();
    }



}



package org.example.assi_7.controllers;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.model.Course;
import org.example.assi_7.model.Student;

import java.util.List;

public class EnrollStudentController implements Initializable {

    @FXML
    private Label studentNameLabel;

    @FXML
    private ComboBox<String> dropDownCourses;

    @FXML
    private Label errorLabel;

    public void initialize(java.net.URL location, java.util.ResourceBundle resources) {
    }

    public ObservableList<String> getCourses() {
        ObservableList<String> courses = FXCollections.observableArrayList();
        // get courses from DataStorage
        List<Course> courseList = DataStorage.getInstance().getCourses();
        for (Course course : courseList) {
            courses.add(course.getCourseName());
        }
        return courses;
    }
    public ObservableList<String> getCourses(List<Course> userCourseList) {
        ObservableList<String> courses = FXCollections.observableArrayList();
        // get courses from DataStorage
        List<Course> courseList = DataStorage.getInstance().getCourses();
        for (Course course : courseList) {
            // if the course is not in the user's course list
            if (!userCourseList.contains(course)){
                courses.add(course.getCourseName());
            }
        }
        return courses;
    }

    public void setStudentName(String studentName) {
        studentNameLabel.setText(studentName);
    }

    private String studentCode;
    public void setStudentCode(String studentCode) {

        this.studentCode = studentCode;
        // clear
        dropDownCourses.getItems().clear();
        dropDownCourses.getItems().addAll(getCourses(DataStorage.getInstance().getStudentByCode(studentCode).getEnrolledCourses()));
    }

    public void enroll(javafx.event.ActionEvent actionEvent) {
      // enroll into course
        if (dropDownCourses.getValue() == null) {
            // make it red
            errorLabel.setStyle("-fx-text-fill: red");
            dropDownCourses.setStyle("-fx-border-color: red");
            errorLabel.setText("There are no courses to enroll in");
            return;
        }
        // find student by studentCode
        Student student = DataStorage.getInstance().getStudentByCode(studentCode);

        // update student course
        // find course by course name
        Course course = DataStorage.getInstance().getCourseByName(dropDownCourses.getValue());
        student.enrollInCourse(course);

        // update student in DataStorage
        DataStorage.getInstance().updateStudent(student);

        // close window
        closeWindow();
    }

    private void closeWindow() {
        // Get the current stage (window) and close it
        Stage stage = (Stage) studentNameLabel.getScene().getWindow();
        stage.close();
    }
}


package org.example.assi_7.controllers;

public class GradeController {
}



package org.example.assi_7.controllers;

import com.almasb.fxgl.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.model.Student;

import java.io.IOException;
import java.util.List;

public class StudentController implements Initializable {

    @FXML
    private TableView<Student> studentTableView;

    @FXML
    private TableColumn<Student, String> studentNameColumn;

    @FXML
    private TableColumn<Student, String> studentIDColumn;

    @FXML
    private TableColumn<Student, String> studentOverallGradeColumn;

    @FXML
    private TableColumn<Student, String> studentActionsColumn;

    public void initialize(java.net.URL location, java.util.ResourceBundle resources) {
        // student table should be full width
        studentTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        studentNameColumn.setCellValueFactory(new PropertyValueFactory<Student, String>("name"));
        studentIDColumn.setCellValueFactory(new PropertyValueFactory<Student, String>("studentID"));
        studentOverallGradeColumn.setCellValueFactory(new PropertyValueFactory<Student, String>("overallGrade"));
        studentTableView.setItems(getStudents());

        // add edit and delete buttons to each row
        studentActionsColumn.setCellFactory(param -> getStudentActionsCell());

        studentTableView.setEditable(true);
    }

    // dummy data
    public ObservableList<Student> getStudents() {
        ObservableList<Student> students = FXCollections.observableArrayList();
        // get students from DataStorage
        List<Student> studentList = DataStorage.getInstance().getStudents();

        // clear the list
        studentTableView.getItems().clear();
        students.addAll(studentList);
        return students;
    }

    public TableCell<Student, String> getStudentActionsCell() {
        return new TableCell<Student, String>() {
            // create buttons
            final javafx.scene.control.Button editButton = new javafx.scene.control.Button("Update Student");

            final javafx.scene.control.Button viewButton = new javafx.scene.control.Button("View Student");

            // add buttons to cell
            {
                editButton.getStyleClass().add("action-button");
                viewButton.getStyleClass().add("action-button");
                editButton.setOnAction((javafx.event.ActionEvent event) -> {
                    Student student = getTableView().getItems().get(getIndex());
                    editStudent(student);
                });

                viewButton.setOnAction((javafx.event.ActionEvent event) -> {
                    Student student = getTableView().getItems().get(getIndex());
                    viewStudent(student);
                });
            }

            // display buttons if the row is not empty
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                // Set buttons in the cell
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox buttonsBox = new HBox(5, editButton, viewButton);
                    setGraphic(buttonsBox);
                }
            }
        };
    }

    public void editStudent(Student student) {
        String path = "/org/example/assi_7/view/components/UpdateStudent.fxml";
        // new window to add student
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
            Parent root = loader.load();

            EditStudentController editStudentController = loader.getController();

            editStudentController.setStudentName(student.getName());
            editStudentController.setStudentCode(student.getStudentID());

            // new stage
            Stage stage = new Stage();
            stage.setTitle("Edit Student");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 600, 400));

            // set the owner of the new stage
            stage.initOwner(studentTableView.getScene().getWindow());

            // show the new stage
            stage.showAndWait();

            // refresh the table view
            studentTableView.setItems(getStudents());

        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }

    public void viewStudent(Student student) {
        String path = "/org/example/assi_7/view/components/ViewStudent.fxml";
        // new window to add student
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
            Parent root = loader.load();

            // set student name
            ViewStudentController viewStudentController = loader.getController();
            viewStudentController.setStudentName(student.getName());
            viewStudentController.setStudentCode(student.getStudentID());

            // new stage
            Stage stage = new Stage();
            stage.setTitle("View Student");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 600, 400));

            // set the owner of the new stage
            stage.initOwner(studentTableView.getScene().getWindow());

            // show the new stage
            stage.showAndWait();

            // refresh the table view
            studentTableView.setItems(getStudents());
        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }
    public void addStudent(javafx.event.ActionEvent actionEvent) {
        String path = "/org/example/assi_7/view/components/AddStudent.fxml";
        // new window to add student
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
            Parent root = loader.load();

            // new stage
            Stage stage = new Stage();
            stage.setTitle("Add Student");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 600, 400));

            // set the owner of the new stage
            stage.initOwner(studentTableView.getScene().getWindow());

            // show the new stage
            stage.showAndWait();

            // refresh the table view
            studentTableView.setItems(getStudents());


        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }
}



package org.example.assi_7.controllers;


import com.almasb.fxgl.logging.Logger;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.example.assi_7.helpers.DataStorage;
import org.example.assi_7.model.Course;
import org.example.assi_7.model.Student;

import java.io.IOException;

public class ViewStudentController {

    public ViewStudentController() {

    }

    @FXML
    private Label studentNameLabel;

    @FXML
    private VBox showEnrolledCourses;


    public void setStudentName(String studentName) {
        studentNameLabel.setText(studentName);
    }

    private String studentCode;
    public void setStudentCode(String studentCode) {
        this.studentCode = studentCode;
        loadEnrolledCourses();
    }

    public void enrollStudent(javafx.event.ActionEvent actionEvent) {
        String path = "/org/example/assi_7/view/components/EnrollStudent.fxml";

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
            Parent root = loader.load();

            // set student name
            EnrollStudentController enrollStudentController = loader.getController();
            enrollStudentController.setStudentName(studentNameLabel.getText());
            enrollStudentController.setStudentCode(studentCode);
            // new stage
            Stage stage = new Stage();
            stage.setTitle("Enroll Student");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 600, 400));

            // set the owner of the new stage
            stage.initOwner(studentNameLabel.getScene().getWindow());

            // show the new stage
            stage.showAndWait();

            // refresh the table view
            loadEnrolledCourses();
        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }

    public void assignGrade(javafx.event.ActionEvent actionEvent) {
        String path = "/org/example/assi_7/view/components/AssignGrade.fxml";

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
            Parent root = loader.load();

            // set student name
            AssignGradeController assignGradeController = loader.getController();
            assignGradeController.setStudentName(studentNameLabel.getText());
            assignGradeController.setStudentCode(studentCode);
            // new stage
            Stage stage = new Stage();
            stage.setTitle("Assign Grade");
            stage.setResizable(false);
            stage.setScene(new javafx.scene.Scene(root, 600, 400));

            // set the owner of the new stage
            stage.initOwner(studentNameLabel.getScene().getWindow());

            // show the new stage
            stage.showAndWait();
            // refresh the table view
            loadEnrolledCourses();
        } catch (IOException e) {
            Logger.get(AppController.class).fatal("Error loading " + path, e);
        }
    }


    public void loadEnrolledCourses() {
        if (studentCode != null) {
            // clear the VBox
            showEnrolledCourses.getChildren().clear();
            System.out.println("Loading enrolled courses for student with code " + studentCode);

            if (DataStorage.getInstance().getStudentByCode(studentCode) == null) {
                System.out.println("Student with code " + studentCode + " not found");
                Logger.get(AppController.class).fatal("Student with code " + studentCode + " not found");
                return;
            }

            if (DataStorage.getInstance().getStudentByCode(studentCode).getEnrolledCourses() == null) {
                System.out.println("Student with code " + studentCode + " has no enrolled courses");
                Logger.get(AppController.class).fatal("Student with code " + studentCode + " has no enrolled courses");
                return;
            }
            int count = 1; // Initialize a counter for numbering the courses

            for (Course course : DataStorage.getInstance().getStudentByCode(studentCode).getEnrolledCourses()) {
                // student
                Student student = DataStorage.getInstance().getStudentByCode(studentCode);
                boolean isAssigned = student.isGradeAssigned(course);
                Label courseNameLabel = new Label(count++ + ". " + course.getCourseName() + " (" + course.getCourseCode() + ") " + (isAssigned ? " - Grade: " + student.getCourseGrade(course) : ""));
                courseNameLabel.setWrapText(true);
                courseNameLabel.setStyle("-fx-font-size: 14px;");
                showEnrolledCourses.getChildren().add(courseNameLabel);
            }
        }
    }
}


/****************************************** helpers **********************/

package org.example.assi_7.helpers;

import org.example.assi_7.model.Course;
import org.example.assi_7.model.Student;

import java.util.ArrayList;
import java.util.List;

public class DataStorage {
    private static DataStorage instance = null;
    private final List<Student> students;

    private final List<Course> courses;

    private DataStorage() {
        students = new ArrayList<>();
        // dummy data
        courses = new ArrayList<>();
        courses.add(new Course("CSE 111", "Intro to Computer Science"));
        courses.add(new Course("CSE 222", "Data Structures"));
        courses.add(new Course("CSE 333", "Algorithms"));
    }

    public static DataStorage getInstance() {
        if (instance == null) {
            instance = new DataStorage();
        }
        return instance;
    }

    public List<Student> getStudents() {
        return students;
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    // You can add more methods as needed

    // For example, to enroll a student in a course
    public void enrollStudent(Student student, Course course) {
        // Implement logic to enroll student in a course
    }


    public Student getStudentByCode(String studentCode) {
        for (Student student : students) {
            if (student.getStudentID().equals(studentCode)) {
                return student;
            }
        }
        return null;
    }

    public void updateStudent(Student student) {
        for (int i = 0; i < students.size(); i++) {
            if (students.get(i).getStudentID().equals(student.getStudentID())) {
                students.set(i, student);
                break;
            }
        }
    }


    public void addCourse(Course course) {
        courses.add(course);
    }

    public List<Course> getCourses() {
        return courses;
    }

    public Course getCourseByName(String courseName) {
        for (Course course : courses) {
            if (course.getCourseName().equals(courseName)) {
                return course;
            }
        }
        return null;
    }
}


package org.example.assi_7.helpers;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Validator<T> {
    private final T value;
    private boolean isValid;
    private final List<String> errorMessages;

    private Validator(T value) {
        this.value = value;
        this.isValid = true;
        this.errorMessages = new ArrayList<>();
    }

    public static Validator<String> forString(String value) {
        return new Validator<>(value);
    }

    public static Validator<Integer> forInt(int value) {
        return new Validator<>(value);
    }

    public static Validator<Double> forDouble(double value) {
        return new Validator<>(value);
    }


    public Validator<T> isNotNull() {
        return validate(value != null, "Value must not be null.");
    }

    public Validator<T> isNotNull(String errorMessage) {
        return validate(value != null, errorMessage);
    }

    public Validator<T> hasLengthBetween(int minLength, int maxLength) {
        return validate(
                value != null && value.toString().length() >= minLength && value.toString().length() <= maxLength,
                "Length must be between " + minLength + " and " + maxLength + ".");
    }

    public Validator<T> isBetween(int minValue, int maxValue) {
        return validate(value != null && (int) value >= minValue && (int) value <= maxValue,
                "Value must be between " + minValue + " and " + maxValue + ".");
    }

    public Validator<T> isBetween(double minValue, double maxValue) {
        return validate(value != null && (double) value >= minValue && (double) value <= maxValue,
                "Value must be between " + minValue + " and " + maxValue + ".");
    }

    public Validator<T> isInteger() {
        return validate(value != null && value.toString().matches("^-?\\d+$"),
                "Value must be an integer.");
    }

    public Validator<T> isInValues(T[] values) {
        // check if value is in values
        return validate(
                // use uppercase to compare
                value != null && Arrays.stream(values)
                        .anyMatch(val -> val.toString().equalsIgnoreCase(value.toString())),
                "Value must be one of " + Arrays.toString(values) + ".");
    }

    // Add more validation methods as needed

    public boolean isValid() {
        return isValid;
    }

    public List<String> getErrorMessages() {
        return errorMessages;
    }

    public T get() {
        return value;
    }

    private Validator<T> validate(boolean condition, String errorMessage) {
        isValid = isValid && condition;
        if (!condition) {
            errorMessages.add(errorMessage);
        }
        return this;
    }
}


/************************************* Model ***********************/

package org.example.assi_7.model;

import java.util.ArrayList;
import java.util.List;

public class Course {
    private String courseCode;
    private String courseName;
    private int maxCapacity;
    private static int totalEnrolledStudents = 0;
    private final List<Student> enrolledStudents = new ArrayList<Student>();
    // Other necessary instance variables

    // Constructors
    public Course(String courseCode, String courseName) {
        this.courseCode = courseCode;
        this.courseName = courseName;
    }

    public Course(String courseCode, String courseName, int maxCapacity) {
        this.courseCode = courseCode;
        this.courseName = courseName;
        this.maxCapacity = maxCapacity;
    }

    // Getters and setters
    public String getCourseCode() {
        return courseCode;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getMaxCapacity() {
        return maxCapacity;
    }

    public void setCourseCode(String courseCode) {
        this.courseCode = courseCode;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }

    public void setMaxCapacity(int maxCapacity) {
        if (maxCapacity >= 0) {
            this.maxCapacity = maxCapacity;
        }
    }

    public List<Student> getEnrolledStudents() {
        // Implement logic to get list of enrolled students
        return enrolledStudents;
    }

    public void addStudent(Student student) {
        // Implement logic to add a student to the list of enrolled students
        this.enrolledStudents.add(student);
        totalEnrolledStudents++;
    }

    public List<String> getEnrolledStudentNames() {
        // Implement logic to get list of enrolled students
        List<String> enrolledStudentNames = new ArrayList<String>();
        for (Student student : enrolledStudents) {
            enrolledStudentNames.add(student.getName());
        }
        return enrolledStudentNames;
    }

    public static int getTotalEnrolledStudents() {
        return totalEnrolledStudents;
    }

    public static void setTotalEnrolledStudents(int totalEnrolledStudents) {
        Course.totalEnrolledStudents = totalEnrolledStudents;
    }
}


package org.example.assi_7.model;

public class Grade {
    private final int studentId;
    private final int courseId;
    private final String grade;

    public Grade(int studentId, int courseId, String grade) {
        this.studentId = studentId;
        this.courseId = courseId;
        this.grade = grade;
    }

    public int getStudentId() {
        return studentId;
    }

    public int getCourseId() {
        return courseId;
    }

    public String getGrade() {
        return grade;
    }
}



package org.example.assi_7.model;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Student {
    private String name;
    private String studentID;
    private final List<Course> enrolledCourses;
    private final Map<Course, Integer> courseGrades;

    private  String overallGrade;
    // Other necessary instance variables

    // Constructor
    public Student(String name, String studentID) {
        this.name = name;
        this.studentID = studentID;
        this.overallGrade = "N/A";
        this.enrolledCourses = new ArrayList<Course>();
        this.courseGrades = new HashMap<Course, Integer>();
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public String getStudentID() {
        return studentID;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setStudentID(String studentID) {
        this.studentID = studentID;
    }
    // end getters and setters

    public List<Course> getEnrolledCourses() {
        return enrolledCourses;
    }

    public void enrollInCourse(Course course) {
        // Implement logic to enroll student in a course
        this.enrolledCourses.add(course);
    }

    public int getCourseGrade(Course course) {
        // Implement logic to get grade of student for a course
        if (!isCourseEnrolled(course) || !isGradeAssigned(course)) {
            return 0;
        }
        return this.courseGrades.get(course);
    }

    public void assignGrade(Course course, int grade) {
        // Implement logic to assign grade to student for a course
        if (isCourseEnrolled(course)) {
            this.courseGrades.put(course, grade);
        } else {
            System.out.println("Student is not enrolled in this course.");
        }
    }

    public int getOverallGrade() {
        // Implement logic to calculate overall grade for a student
        int totalGrade = 0;
        int numCourses = 0;
        for (Course course : this.enrolledCourses) {
            if (isCourseEnrolled(course)) {
                // add grade for course to total grade
                totalGrade += getCourseGrade(course);
                // increment number of courses
                numCourses++;
            }
        }
    if (totalGrade == 0 || numCourses == 0) {
        return 0;
    }
        // overall grade is the average of the grades for all courses
        int overallGrade = totalGrade / numCourses;

        this.overallGrade = Integer.toString(overallGrade);
        return overallGrade;
    }

    public boolean isCourseEnrolled(Course course) {
        // Implement logic to check if student is enrolled in a course
        return this.enrolledCourses.contains(course);
    }


    public boolean isGradeAssigned(Course course) {
        // Implement logic to check if grade is assigned for a course
        return this.courseGrades.containsKey(course);
    }


}


/********************************** resources *************************/

// global.css

/* styles.css */
.primary-color {
    -fx-background-color: #343541;
    -fx-text-fill: white;
}

.secondary-color {
    -fx-background-color: #262626;
    -fx-text-fill: white;
}

.third-color {
    -fx-background-color: #2d2d2d;
    -fx-text-fill: white;
}

.fourth-color {
    -fx-background-color: #e373ff;
    -fx-text-fill: white;
}

.icon-button{
    -fx-background-color: transparent;
    -fx-background-radius: 0;
    -fx-border-radius: 0;
    -fx-border-color: transparent;
    -fx-border-width: 0;
    -fx-text-fill: white;
    -fx-cursor: hand;
}

.secondary-button{
    -fx-background-color: black;
    -fx-background-radius: 10;
    -fx-border-radius: 10;
    -fx-border-color: gray;
    -fx-border-width: 1;
    -fx-text-fill: white;
    -fx-cursor: hand;
}

.action-button{
    -fx-background-color: #e373ff;
    -fx-background-radius: 10;
    -fx-border-radius: 10;
    -fx-border-color: gray;
    -fx-border-width: 1;
    -fx-text-fill: white;
    -fx-cursor: hand;
}


//////////////////////////////// FXML ///////////////////////

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import org.kordamp.ikonli.javafx.FontIcon?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" styleClass="secondary-color" stylesheets="@../css/global.css" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.AppController">
   <top>
      <MenuBar BorderPane.alignment="CENTER">
        <menus>
          <Menu mnemonicParsing="false" text="File">
            <items>
              <MenuItem mnemonicParsing="false" text="Close" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Edit">
            <items>
              <MenuItem mnemonicParsing="false" text="Delete" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Help">
            <items>
              <MenuItem mnemonicParsing="false" text="About" />
            </items>
          </Menu>
        </menus>
      </MenuBar>
   </top>
   <left>
      <AnchorPane prefHeight="372.0" prefWidth="91.0" styleClass="primary-color" BorderPane.alignment="CENTER">
         <children>
            <VBox layoutY="86.0" prefHeight="200.0" prefWidth="107.0">
               <children>
                  <VBox>
                     <children>
                        <Button mnemonicParsing="false" onAction="#studentView" prefHeight="45.0" prefWidth="112.0" styleClass="icon-button" text=" Students">
                           <graphic>
                              <FontIcon iconColor="#e373ff" iconLiteral="fab-mendeley" />
                           </graphic>
                        </Button>
                     </children>
                  </VBox>
                  <Button layoutX="10.0" layoutY="10.0" mnemonicParsing="false" onAction="#courseView" prefHeight="45.0" prefWidth="112.0" styleClass="icon-button" text="  Courses">
                     <graphic>
                        <FontIcon iconColor="#e373ff" iconLiteral="fab-leanpub" />
                     </graphic>
                  </Button>
                  <Button layoutX="10.0" layoutY="10.0" mnemonicParsing="false" onAction="#gradeView" prefHeight="45.0" prefWidth="112.0" styleClass="icon-button" text="   Grades">
                     <graphic>
                        <FontIcon iconColor="#e373ff" iconLiteral="fab-napster" />
                     </graphic>
                  </Button>
               </children>
            </VBox>
         </children>
      </AnchorPane>
   </left>
   <bottom>
      <HBox prefHeight="38.0" prefWidth="600.0" styleClass="third-color" BorderPane.alignment="CENTER" />
   </bottom>
   <center>
      <VBox fx:id="contentPane" BorderPane.alignment="CENTER" />
   </center>
</BorderPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.text.Font?>
<?import org.kordamp.ikonli.javafx.FontIcon?>

<?import javafx.scene.layout.Region?>
<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.CourseController">
    <children>
        <TableView fx:id="courseTable" layoutY="51.0" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="349.0" prefWidth="600.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
            <columns>
                <TableColumn fx:id="courseCodeColumn" prefWidth="75.0" text="Code" />
                <TableColumn fx:id="courseNameColumn" prefWidth="75.0" text="Name" />
                <TableColumn fx:id="maxCapacityColumn" prefWidth="105.94061279296875" text="Max Capacity" />
                <TableColumn fx:id="totalEnrolledColumn" prefWidth="120.79205322265625" text="Total Enrolled" />
                <TableColumn prefWidth="201.980224609375" text="Action" />
            </columns>
         <columnResizePolicy>
            <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
         </columnResizePolicy>
        </TableView>
        <HBox alignment="TOP_RIGHT" prefHeight="52.0" prefWidth="600.0">
            <children>
                <Label prefHeight="27.0" prefWidth="142.0" text="Course Table" textAlignment="CENTER" textFill="WHITE" wrapText="true">
                    <HBox.margin>
                        <Insets top="13.0" />
                    </HBox.margin>
                    <font>
                        <Font name="Abyssinica SIL" size="19.0" />
                    </font>
                </Label>
                <Region HBox.hgrow="ALWAYS" />
<!--                <AnchorPane prefHeight="200.0" prefWidth="200.0">-->
<!--                    <children>-->
<!--                        <Button layoutX="15.0" layoutY="14.0" mnemonicParsing="false" onAction="#enrollStudent" prefHeight="26.0" prefWidth="171.0" styleClass="secondary-button" stylesheets="@../css/global.css" text="Enroll Students">-->
<!--                            <graphic>-->
<!--                                <FontIcon iconColor="#e373ff" iconLiteral="far-plus-square" />-->
<!--                            </graphic>-->
<!--                        </Button>-->
<!--                    </children>-->
<!--                </AnchorPane>-->
            </children>
            <HBox.margin>
                <Insets right="10.0" />
            </HBox.margin>
        </HBox>

    </children>
</AnchorPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Accordion?>
<?import javafx.scene.control.TitledPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>


<VBox maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <Accordion>
        <panes>
          <TitledPane animated="false" text="untitled 1">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
          <TitledPane animated="false" text="untitled 2">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
          <TitledPane animated="false" text="untitled 3">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
        </panes>
      </Accordion>
   </children>
</VBox>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>
<?import org.kordamp.ikonli.javafx.*?>

<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.StudentController">
    <children>
        <TableView fx:id="studentTableView" layoutY="51.0" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="349.0" prefWidth="600.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
            <columns>
                <TableColumn fx:id="studentIDColumn" prefWidth="75.0" text="ID" />
                <TableColumn fx:id="studentNameColumn" prefWidth="75.0" text="Name" />
                <TableColumn fx:id="studentOverallGradeColumn" prefWidth="105.94061279296875" text="Overall Grade" />
                <TableColumn prefWidth="201.980224609375" text="Action" fx:id="studentActionsColumn" />
            </columns>
            <columnResizePolicy>
                <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
            </columnResizePolicy>
        </TableView>
        <HBox alignment="TOP_RIGHT" prefHeight="52.0" prefWidth="600.0">
            <children>
                <Label prefHeight="27.0" prefWidth="142.0" text="Students Table" textAlignment="CENTER" textFill="WHITE" wrapText="true">
                    <HBox.margin>
                        <Insets top="13.0" />
                    </HBox.margin>
                    <font>
                        <Font name="Abyssinica SIL" size="19.0" />
                    </font>
                </Label>
                <Region HBox.hgrow="ALWAYS" />
                <AnchorPane prefHeight="200.0" prefWidth="200.0">
                    <children>
                        <Button layoutX="15.0" layoutY="14.0" mnemonicParsing="false" onAction="#addStudent" prefHeight="26.0" prefWidth="171.0" styleClass="secondary-button" stylesheets="@../css/global.css" text="Add Students">
                            <graphic>
                                <FontIcon iconColor="#e373ff" iconLiteral="far-plus-square" />
                            </graphic>
                        </Button>
                    </children>
                </AnchorPane>
            </children>
            <HBox.margin>
                <Insets right="10.0" />
            </HBox.margin>
        </HBox>

    </children>
</AnchorPane>

///////////////////// components //////////////////////

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.AddStudentController">
   <children>
      <AnchorPane layoutX="96.0" layoutY="35.0" prefHeight="329.0" prefWidth="387.0">
         <children>
            <AnchorPane layoutX="27.0" layoutY="34.0" prefHeight="77.0" prefWidth="336.0">
               <children>
                  <Label layoutX="14.0" layoutY="18.0" prefHeight="19.0" prefWidth="103.0" text="Student Name:" />
                  <TextField fx:id="studentNameTextField" layoutX="151.0" layoutY="16.0" AnchorPane.bottomAnchor="37.0" />
               </children>
            </AnchorPane>
            <Label fx:id="studentNameErrorLabel" layoutX="37.0" layoutY="97.0" prefHeight="77.0" prefWidth="317.0" textAlignment="CENTER" wrapText="true" />
            <Button layoutX="310.0" layoutY="181.0" mnemonicParsing="false" onAction="#addStudent" text="Add" />
         </children>
      </AnchorPane>
   </children>
</AnchorPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.AssignGradeController">
    <children>
        <AnchorPane layoutX="96.0" layoutY="35.0" prefHeight="329.0" prefWidth="387.0">
            <children>
                <AnchorPane layoutX="27.0" layoutY="34.0" prefHeight="53.0" prefWidth="340.0">
                    <children>
                        <Label layoutX="14.0" layoutY="18.0" prefHeight="21.0" prefWidth="102.0" text="Student Name:" />
                        <AnchorPane layoutX="117.0" layoutY="12.0" prefHeight="32.0" prefWidth="200.0">
                            <children>
                                <Label fx:id="studentNameLabel" layoutY="8.0" prefHeight="17.0" prefWidth="200.0" />
                            </children></AnchorPane>
                    </children>
                </AnchorPane>
                <Button layoutX="298.0" layoutY="291.0" mnemonicParsing="false" onAction="#assignGrade" text="Assign" />
                <AnchorPane layoutX="32.0" layoutY="111.0" prefHeight="53.0" prefWidth="340.0">
                    <children>
                        <Label layoutX="14.0" layoutY="18.0" prefHeight="22.0" prefWidth="130.0" text="Available Courses:" />
                        <AnchorPane layoutX="140.0" layoutY="10.0" prefHeight="32.0" prefWidth="200.0">
                            <children>
                                <ComboBox fx:id="dropDownCourses" layoutX="35.0" layoutY="10.0" prefWidth="150.0" />
                            </children>
                        </AnchorPane>
                    </children>
                </AnchorPane>
            <AnchorPane layoutX="27.0" layoutY="178.0" prefHeight="53.0" prefWidth="340.0">
               <children>
                  <Label layoutX="14.0" layoutY="18.0" prefHeight="22.0" prefWidth="130.0" text="Assign Grade" />
                  <AnchorPane layoutX="140.0" layoutY="10.0" prefHeight="32.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="grade" layoutX="15.0" layoutY="7.0" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
            <Label layoutX="33.0" layoutY="234.0" prefHeight="45.0" prefWidth="324.0" textFill="RED" wrapText="true" fx:id="errorLabel" />
            </children>
        </AnchorPane>
    </children>
</AnchorPane>



<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.EnrollStudentController">
    <children>
        <AnchorPane layoutX="96.0" layoutY="35.0" prefHeight="329.0" prefWidth="387.0">
            <children>
                <AnchorPane layoutX="27.0" layoutY="34.0" prefHeight="53.0" prefWidth="340.0">
                    <children>
                        <Label layoutX="14.0" layoutY="18.0" prefHeight="21.0" prefWidth="102.0" text="Student Name:" />
                        <AnchorPane layoutX="117.0" layoutY="12.0" prefHeight="32.0" prefWidth="200.0">
                            <children>
                                <Label fx:id="studentNameLabel" layoutY="8.0" prefHeight="17.0" prefWidth="200.0" />
                            </children></AnchorPane>
                    </children>
                </AnchorPane>
                <Button layoutX="286.0" layoutY="255.0" mnemonicParsing="false" onAction="#enroll" text="Enroll" />
            <AnchorPane layoutX="32.0" layoutY="111.0" prefHeight="53.0" prefWidth="340.0">
               <children>
                  <Label layoutX="14.0" layoutY="18.0" prefHeight="22.0" prefWidth="130.0" text="Available Courses:" />
                  <AnchorPane layoutX="140.0" layoutY="10.0" prefHeight="32.0" prefWidth="200.0">
                     <children>
                        <ComboBox fx:id="dropDownCourses" layoutX="35.0" layoutY="10.0" prefWidth="150.0" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
            <Label fx:id="errorLabel" layoutX="22.0" layoutY="172.0" prefHeight="70.0" prefWidth="331.0" wrapText="true" />
            </children>
        </AnchorPane>
    </children>
</AnchorPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.EditStudentController">
    <children>
        <AnchorPane layoutX="96.0" layoutY="35.0" prefHeight="329.0" prefWidth="387.0">
            <children>
                <AnchorPane layoutX="27.0" layoutY="34.0" prefHeight="53.0" prefWidth="340.0">
                    <children>
                        <Label layoutX="14.0" layoutY="18.0" prefHeight="19.0" prefWidth="103.0" text="Student Name(edit):" />
                        <TextField fx:id="studentNameTextField" layoutX="156.0" layoutY="15.0" AnchorPane.bottomAnchor="13.712881725103042" />
                    </children>
                </AnchorPane>
                <Label fx:id="studentNameErrorLabel" layoutX="37.0" layoutY="97.0" prefHeight="77.0" prefWidth="317.0" textAlignment="CENTER" wrapText="true" />

                <Button layoutX="310.0" layoutY="181.0" mnemonicParsing="false" onAction="#updateStudent" text="Add" />
            </children>
        </AnchorPane>
    </children>
</AnchorPane>


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.assi_7.controllers.ViewStudentController">
    <children>
        <AnchorPane layoutX="96.0" layoutY="35.0" prefHeight="329.0" prefWidth="387.0">
            <children>
                <AnchorPane layoutX="27.0" layoutY="34.0" prefHeight="53.0" prefWidth="340.0">
                    <children>
                        <Label layoutX="14.0" layoutY="18.0" prefHeight="21.0" prefWidth="102.0" text="Student Name:" />
                  <AnchorPane layoutX="117.0" layoutY="12.0" prefHeight="32.0" prefWidth="200.0">
                     <children>
                        <Label fx:id="studentNameLabel" layoutY="8.0" prefHeight="17.0" prefWidth="200.0" />
                     </children></AnchorPane>
                    </children>
                </AnchorPane>
                <Button layoutX="14.0" layoutY="291.0" mnemonicParsing="false" onAction="#enrollStudent" text="Enroll in New Courses" />
            <AnchorPane layoutX="27.0" layoutY="99.0" prefHeight="53.0" prefWidth="340.0">
               <children>
                  <Label layoutX="14.0" layoutY="18.0" prefHeight="21.0" prefWidth="210.0" text="Student Enrolled Courses:" />
                  <AnchorPane layoutX="117.0" layoutY="12.0" prefHeight="32.0" prefWidth="200.0" />
               </children>
            </AnchorPane>
            <VBox fx:id="showEnrolledCourses" layoutX="38.0" layoutY="152.0" prefHeight="122.0" prefWidth="319.0" />
            <Button layoutX="210.0" layoutY="291.0" mnemonicParsing="false" onAction="#assignGrade" text="Assign Grade " />
            </children>
        </AnchorPane>
    </children>
</AnchorPane>

